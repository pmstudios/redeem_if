{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","visibleDownloadLink","visibleError","redeemCode","handleLink","renderDownloadLink","className","href","onClick","renderErrorMsg","handleSignin","updateInput","bind","handleSubmit","event","this","setState","target","value","e","console","log","src","alt","type","name","placeholder","onChange","onKeyPress","maxLength","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOA2GeA,G,wDAjGd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAPPC,MAAQ,CACPC,qBAAqB,EACrBC,cAAc,EACdC,WAAY,IAGK,EA6BlBC,WAAa,aA7BK,EAiClBC,mBAAqB,kBACpB,yBAAKC,UAAU,0BACd,kDAAuB,uBAAGC,KAAK,IAAIC,QAAS,EAAKJ,YAA1B,aACvB,qDAA0B,uBAAGG,KAAK,IAAIC,QAAS,EAAKJ,YAA1B,eApCV,EAwClBK,eAAiB,kBAChB,yBAAKH,UAAU,UACd,oDA1CgB,EA8ClBI,aAAe,aA3Cd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,wDAONE,GACXC,KAAKC,SAAS,CAACb,WAAaW,EAAMG,OAAOC,U,qCAKrC,WAAaH,KAAKf,MAAMG,WAE3BY,KAAKC,SAAS,CACbf,qBAAqB,EACrBC,cAAc,IAKfa,KAAKC,SAAS,CACbf,qBAAqB,EACrBC,cAAc,M,mCA0BJiB,GACZC,QAAQC,IAAIF,K,+BAWZ,OACC,6BACC,yBAAKb,UAAU,SACd,yBAAKA,UAAU,cACd,yBAAKA,UAAU,QACd,uBAAGC,KAAK,yBAAyBU,OAAO,UAAxC,eAED,yBAAKX,UAAU,SACd,uBAAGC,KAAK,gDAAgDU,OAAO,UAA/D,sBAED,yBAAKK,IAAK,wBAAyBC,IAAI,QAExC,yBAAKjB,UAAU,iBACd,yBAAKA,UAAU,UACd,yBAAKA,UAAU,SACd,gEAED,8BACC,2BAAOkB,KAAK,OAAOC,KAAK,OAAOC,YAAY,cAAcC,SAAUZ,KAAKJ,YAAaiB,WAAYb,KAAKJ,YAAakB,UAAU,KAAKC,UAAQ,IAC1I,yBAAKtB,QAASO,KAAKF,aAAcP,UAAU,UAC1C,uCAGF,yBAAKA,UAAU,UACbS,KAAKf,MAAME,cAAgBa,KAAKN,mBAGlCM,KAAKf,MAAMC,qBAAuBc,KAAKV,4B,GAhG5B0B,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.b28d500b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\tstate = {\n\t\tvisibleDownloadLink: false,\n\t\tvisibleError: false,\n\t\tredeemCode: \"\",\n\t}\n\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.updateInput = this.updateInput.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\t\n\tupdateInput(event){\n\t\tthis.setState({redeemCode : event.target.value});\n\t}\n\n\thandleSubmit(){\n\t\t//console.log('Your input value is: ' + this.state.redeemCode);\n\t\tif (\"FS72P5\" === this.state.redeemCode)\n\t\t{\n\t\t\tthis.setState({ \n\t\t\t\tvisibleDownloadLink: true,\n\t\t\t\tvisibleError: false\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setState({ \n\t\t\t\tvisibleDownloadLink: false,\n\t\t\t\tvisibleError: true\n\t\t\t});\n\t\t}\n\t}\n\n\thandleLink = () => {\n\t\t\n\t}\n\n\trenderDownloadLink = () => (\n\t\t<div className=\"signin vertical-center\">\n\t\t\t<p>Google Drive Link - <a href='#' onClick={this.handleLink}>Download</a></p>\n\t\t\t<p>Direct Download Link - <a href='#' onClick={this.handleLink}>Download</a></p>\n\t\t</div>\n\t)\n\t\n\trenderErrorMsg = () => (\n\t\t<div className=\"errmsg\">\n\t\t\t<p>Invalid Redeem Code</p>\n\t\t</div>\n\t)\n\n\thandleSignin = () => {\n\t\t\n\t}\n\t\n\thandleChange(e) {\n\t\tconsole.log(e);\n\t\treturn;\n\t\tconst { name, value } = e.target;\n\t\tif(name === 'code') \n\t\t\tthis.setState({ redeemCode: value });\n\n\t\tconst { changeInput } = this.props;\n\t\tchangeInput({ name, value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"frame\">\n\t\t\t\t\t<div className=\"top center\">\n\t\t\t\t\t\t<div className=\"left\">\n\t\t\t\t\t\t\t<a href=\"https://pm-studios.com\" target=\"_blank\">PM-Studios</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"right\">\n\t\t\t\t\t\t\t<a href=\"https://www.pm-studios.com/Projects/Iris-Fall\" target=\"_blank\">Iris.Fall Website</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<img src={'./images/irisfall.jpg'} alt='if' />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"middle center\">\n\t\t\t\t\t\t<div className=\"signup\">\n\t\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t\t<h1>Enter Redeem Code for Iris.Fall</h1>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"code\" placeholder=\"Redeem Code\" onChange={this.updateInput} onKeyPress={this.updateInput} maxLength=\"10\" required />\n\t\t\t\t\t\t\t\t<div onClick={this.handleSubmit} className=\"submit\">\n\t\t\t\t\t\t\t\t\t<p>Submit</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t<div className=\"errmsg\">\n\t\t\t\t\t\t\t\t{this.state.visibleError && this.renderErrorMsg()}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{this.state.visibleDownloadLink && this.renderDownloadLink()}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}